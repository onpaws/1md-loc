{"version":3,"sources":["ErrorBoundary.js","App.jsx","index.jsx"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","this","setState","toString","children","React","Component","locationData","Object","values","data","events","filter","event","venue","map","name","link","coordinates","lon","lat","console","log","App","useState","viewport","setViewport","hoveredObject","undefined","pointerX","pointerY","hover","setHover","useEffect","a","async","fetch","then","response","json","ll","latitude","longitude","zoom","layer","ScatterplotLayer","id","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","d","getRadius","Math","sqrt","exits","getFillColor","getLineColor","onHover","object","x","y","initialViewState","controller","layers","mapboxApiAccessToken","reuseMaps","preventStyleDiffing","style","position","zIndex","pointerEvents","background","padding","borderRadius","left","top","renderTooltip","ReactDOM","render","document","getElementById"],"mappings":"mjhDA2BeA,EAzBf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,UAAU,EAAOC,MAAO,GAAIC,UAAW,MAFrC,EADrB,+EAMoBD,EAAOC,GAEvBC,KAAKC,SAAS,CAAEJ,UAAU,EAAMC,QAAOC,gBAR3C,+BAaI,OAAIC,KAAKJ,MAAMC,SAEN,6BACL,qDACA,6BAAMG,KAAKJ,MAAME,MAAMI,aAIpBF,KAAKL,MAAMQ,aArBtB,GAAmCC,IAAMC,WCWnCC,EAAeC,OAAOC,OAAOC,EAAKC,QAAQC,QAAO,SAACC,GAAD,QAAaA,EAAMC,SACvEC,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,KAAMF,EAAkB,EAAlBA,MAAOG,EAAW,EAAXA,KACnB,MAAO,CAAED,OAAME,YAAa,CAACJ,EAAMK,IAAKL,EAAMM,KAAMA,IAAKN,EAAMM,IAAKD,IAAKL,EAAMK,IAAKF,WAExFI,QAAQC,IAAI,eAAgBf,GAE5B,IAkFegB,EAlFH,WAAO,IAAD,EACgBC,qBADhB,mBACTC,EADS,KACCC,EADD,OAEUF,mBAAS,CAAEG,mBAAeC,EAAWC,cAAUD,EAAWE,cAAUF,IAF9E,mBAETG,EAFS,KAEFC,EAFE,KAIhBC,qBAAU,WACS,EAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACTE,MAdY,0DAefC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA3B,GAAS,IACL8B,EAAO9B,EAAP8B,GACRd,GAAY,WAAQ,MAAO,CAAEe,SAAUD,EAAG,GAAIE,UAAWF,EAAG,GAAIG,KAAM,UAL3D,uCAShB,IAEH,IAUMC,EAAQ,IAAIC,IAAiB,CACjCC,GAAI,oBACJpC,KAAMH,EACNwC,UAAU,EACVC,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,YAAa,EACbC,gBAAiB,EACjBC,gBAAiB,IACjBC,mBAAoB,EACpBC,YAAa,SAAAC,GAAC,OAAIA,EAAEtC,aACpBuC,UAAW,SAAAD,GAAC,OAAIE,KAAKC,KAAKH,EAAEI,QAC5BC,aAAc,SAAAL,GAAC,MAAI,CAAC,IAAK,IAAK,IAC9BM,aAAc,SAAAN,GAAC,MAAI,CAAC,EAAG,EAAG,IAC1BO,QAAS,YAAuB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EAEnBlC,EADEgC,EACO,CACPrC,cAAeqC,EACfnC,SAAUoC,EACVnC,SAAUoC,GAGH,CACPvC,mBAAeC,EACfC,cAAUD,EACVE,cAAUF,OAWlB,OACE,kBAAC,EAAD,KACE,6BACGH,GACC,kBAAC,IAAD,CACE0C,iBAAkB1C,EAClB2C,YAAY,EACZC,OAAQ,CAACzB,IAET,kBAAC,IAAD,CAAW0B,qBAnFK,oGAmFsCC,WAAS,EAACC,qBAAmB,IAxDvE,WAAO,IAAD,EACoBzC,GAAS,GAA/CJ,EADkB,EAClBA,cAAeE,EADG,EACHA,SAAUC,EADP,EACOA,SACjC,OAAOH,GACL,yBAAK8C,MAAO,CAAEC,SAAU,WAAYC,OAAQ,IAAKC,cAAe,OAAQC,WAAY,iBAAkBC,QAAS,OAAQC,aAAc,OAAQC,KAAMnD,EAAUoD,IAAKnD,IAChK,4BAAKH,EAAcX,MACnB,2BAAIW,EAAcV,OAoDbiE,OCvFbC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.bf95aed6.chunk.js","sourcesContent":["import React from 'react'\n\nexport class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: '', errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Display fallback UI\n    this.setState({ hasError: true, error, errorInfo });\n    // You can also log the error to an error reporting service\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <div>\n        <h2>Something went wrong.</h2>\n        <pre>{this.state.error.toString()}</pre>\n      </div>\n      \n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary","import React, { useState, useEffect } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { StaticMap } from 'react-map-gl';\n\nimport data from './data.json';\nimport ErrorBoundary from './ErrorBoundary';\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZGV2bWFwYm94dXNlciIsImEiOiJjazNzdmt2OHIwYWZtM2NvNHh5ZWdreXEwIn0.XFw5zIZigXjqS5JuAJ2YWA';\n// const GEOIP_URL = 'https://json.geoiplookup.io/'; // free but hit a rate limit\n// const IPDATA_URL = 'https://api.ipdata.co?api-key=3ee8cf01bcffcd4142324c995f648e91857b8405a4a90f0a2715bb61'; // free but hit a rate limit\nconst RAPID_GEOIP_URL = 'https://us-central1-geoip-f708b.cloudfunctions.net/loc';\n\nconst locationData = Object.values(data.events).filter((event) => !!event.venue)\n  .map(({ name, venue, link }) => { \n    return { name, coordinates: [venue.lon, venue.lat], lat: venue.lat, lon: venue.lon, link } \n  })\nconsole.log('locationData', locationData)\n\nconst App = () => {\n  const [viewport, setViewport] = useState()\n  const [hover, setHover] = useState({ hoveredObject: undefined, pointerX: undefined, pointerY: undefined })\n\n  useEffect(() => {\n    const fetchPos = async () => {\n      await fetch(RAPID_GEOIP_URL)\n        .then(response => response.json())\n        .then(data => {\n          const { ll } = data;\n          setViewport(() => { return { latitude: ll[0], longitude: ll[1], zoom: 6 } });\n        });\n    };\n    fetchPos();\n  }, []);\n\n  const renderTooltip = () => {\n    const { hoveredObject, pointerX, pointerY } = hover || {};\n    return hoveredObject && (\n      <div style={{ position: 'absolute', zIndex: 100, pointerEvents: 'none', background: 'rgba(0,0,0,.5)', padding: '1rem', borderRadius: '1rem', left: pointerX, top: pointerY }}>\n        <h4>{hoveredObject.name}</h4>\n        <p>{hoveredObject.link}</p>\n      </div>\n    );\n  }\n\n  const layer = new ScatterplotLayer({\n    id: 'scatterplot-layer',\n    data: locationData,\n    pickable: true,\n    opacity: 0.8,\n    stroked: true,\n    filled: true,\n    radiusScale: 6,\n    radiusMinPixels: 5,\n    radiusMaxPixels: 100,\n    lineWidthMinPixels: 1,\n    getPosition: d => d.coordinates,\n    getRadius: d => Math.sqrt(d.exits),\n    getFillColor: d => [255, 140, 0],\n    getLineColor: d => [0, 0, 0],\n    onHover: ({ object, x, y }) => {\n      if (object) {\n        setHover({\n          hoveredObject: object,\n          pointerX: x,\n          pointerY: y\n        })\n      } else {\n        setHover({\n          hoveredObject: undefined,\n          pointerX: undefined,\n          pointerY: undefined\n        })\n      }\n      // const tooltip = `${object.name}\\n${object.address}`;\n      /* Update tooltip\n         http://deck.gl/#/documentation/developer-guide/adding-interactivity?section=example-display-a-tooltip-for-hovered-object\n      */\n    }\n  });\n\n\n  return (\n    <ErrorBoundary>\n      <div>\n        {viewport && (\n          <DeckGL\n            initialViewState={viewport}\n            controller={true}\n            layers={[layer]}\n          >\n            <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} reuseMaps preventStyleDiffing />\n            {renderTooltip()}\n            {/* <ScatterplotLayer id=\"scatterplot-layer\" data={data} /> */}\n          </DeckGL>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n};\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}